/* src/utils/db.js - robust IndexedDB helper for music-player-db */

const DB_NAME = "music-player-db";
const STORE_TRACKS = "tracks";

/**
 * Dev helper: delete DB (use manually from console if needed)
 */
export function deleteDatabaseForDev() {
  return new Promise((resolve, reject) => {
    try {
      const delReq = indexedDB.deleteDatabase(DB_NAME);
      delReq.onsuccess = () => resolve();
      delReq.onerror = (e) => reject(e);
      delReq.onblocked = () => console.warn('delete blocked: close other tabs using the origin');
    } catch (err) {
      reject(err);
    }
  });
}

/**
 * Probe existing DB metadata if possible (uses indexedDB.databases() or probe open).
 * Returns object { found, version, objectStoreNames }.
 */
async function inspectExistingDB() {
  if (typeof indexedDB.databases === "function") {
    try {
      const dbs = await indexedDB.databases();
      const hit = dbs.find(d => d.name === DB_NAME);
      if (hit) return { found: true, version: hit.version || null, objectStoreNames: null };
    } catch (err) {
      // fall through to probe method
      console.debug("databases() failed:", err);
    }
  }

  return new Promise((resolve) => {
    const req = indexedDB.open(DB_NAME);
    let handled = false;
    req.onsuccess = () => {
      if (handled) return;
      handled = true;
      const db = req.result;
      const names = [...db.objectStoreNames];
      const version = db.version;
      db.close();
      resolve({ found: true, version, objectStoreNames: names });
    };
    req.onupgradeneeded = () => {
      // Will also call onsuccess afterwards; nothing to do here
    };
    req.onerror = () => {
      if (handled) return;
      handled = true;
      resolve({ found: false, version: null, objectStoreNames: null });
    };
  });
}

/**
 * Open DB safely. If 'tracks' exists open normally. Otherwise upgrade to version+1 to create it.
 */
export async function openDB() {
  const meta = await inspectExistingDB();

  // If store exists already, open without specifying version (safe)
  if (meta.found && Array.isArray(meta.objectStoreNames) && meta.objectStoreNames.includes(STORE_TRACKS)) {
    return new Promise((resolve, reject) => {
      const req = indexedDB.open(DB_NAME);
      req.onsuccess = () => resolve(req.result);
      req.onerror = () => reject(req.error);
      req.onblocked = () => console.warn("DB open blocked — close other tabs using this origin.");
    });
  }

  // Need to create store via upgrade. Determine target version.
  const targetVersion = (meta.found && typeof meta.version === "number") ? meta.version + 1 : 1;

  return new Promise((resolve, reject) => {
    let req;
    try {
      req = indexedDB.open(DB_NAME, targetVersion);
    } catch (err) {
      return reject(err);
    }

    req.onupgradeneeded = (e) => {
      const db = e.target.result;
      if (!db.objectStoreNames.contains(STORE_TRACKS)) {
        db.createObjectStore(STORE_TRACKS, { keyPath: "id" });
      }
    };

    req.onsuccess = () => resolve(req.result);
    req.onerror = () => {
      // If VersionError occurs, attempt a safe retry: probe current version and use +1
      const err = req.error;
      if (err && err.name === "VersionError") {
        (async () => {
          try {
            const again = await inspectExistingDB();
            const ver = (again.version || 0) + 1;
            const req2 = indexedDB.open(DB_NAME, ver);
            req2.onupgradeneeded = (e) => {
              const db = e.target.result;
              if (!db.objectStoreNames.contains(STORE_TRACKS)) {
                db.createObjectStore(STORE_TRACKS, { keyPath: "id" });
              }
            };
            req2.onsuccess = () => resolve(req2.result);
            req2.onerror = () => reject(req2.error);
            req2.onblocked = () => console.warn("DB upgrade blocked — close other tabs.");
          } catch (probeErr) {
            reject(probeErr);
          }
        })();
      } else {
        reject(err);
      }
    };

    req.onblocked = () => console.warn("DB open blocked — close other tabs.");
  });
}

/* ---------- Store operations ---------- */

export async function saveTracks(tracks = []) {
  if (!Array.isArray(tracks) || tracks.length === 0) return;
  const db = await openDB();
  return new Promise((resolve, reject) => {
    const tx = db.transaction(STORE_TRACKS, "readwrite");
    const store = tx.objectStore(STORE_TRACKS);
    for (const t of tracks) store.put(t);
    tx.oncomplete = () => resolve();
    tx.onerror = () => reject(tx.error);
  });
}

export async function getTracks() {
  const db = await openDB();
  return new Promise((resolve, reject) => {
    const tx = db.transaction(STORE_TRACKS, "readonly");
    const store = tx.objectStore(STORE_TRACKS);
    const req = store.getAll();
    req.onsuccess = () => resolve(req.result || []);
    req.onerror = () => reject(req.error);
  });
}

export async function deleteTrack(trackId) {
  if (!trackId) return;
  const db = await openDB();
  return new Promise((resolve, reject) => {
    const tx = db.transaction(STORE_TRACKS, "readwrite");
    const store = tx.objectStore(STORE_TRACKS);
    const req = store.delete(trackId);
    req.onsuccess = () => resolve();
    req.onerror = () => reject(req.error);
  });
}

/* ---------- localStorage helpers ---------- */

export function saveState(key, value) {
  try {
    localStorage.setItem(key, JSON.stringify(value));
  } catch (err) {
    console.warn(`Failed to save key ${key} to localStorage`, err);
  }
}

export function getState(key) {
  try {
    const v = localStorage.getItem(key);
    return v ? JSON.parse(v) : null;
  } catch (err) {
    console.warn(`Failed to read key ${key} from localStorage`, err);
    return null;
  }
}
